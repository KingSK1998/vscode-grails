name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: ["17"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}
          cache: gradle

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Make gradlew executable
        working-directory: server
        run: chmod +x gradlew

      # Server - Skip tests but ensure JAR is built (CRITICAL for LSP)
      - name: 🔨 Build server (skip tests)
        working-directory: server
        run: ./gradlew --no-daemon build -x test

      # Client - ALWAYS blocking (must work or no point in VSIX)
      - name: 📦 Build client
        working-directory: client
        run: |
          npm ci
          npm run compile
          npm test --if-present

      # Validate CRITICAL artifacts exist
      - name: 🔍 Validate build artifacts
        run: |
          echo "Server build status:"
          if ! ls server/build/libs/*.jar 1> /dev/null 2>&1; then
            echo "❌ CRITICAL: Server JAR not found! Extension will not work."
            echo "Available files in server/build/:"
            find server/build/ -name "*.jar" || echo "No JAR files found anywhere"
            exit 1
          fi
          echo "✅ Server JAR found: $(ls server/build/libs/*.jar)"

          echo "Client build status:"
          if [ ! -d "client/out" ]; then
            echo "❌ Client out directory missing"
            exit 1
          fi
          echo "✅ Client compiled successfully"

      # Package - Only with validated artifacts
      - name: 🎁 Package VSIX
        if: success()
        run: |
          # Ensure client/server directory exists
          mkdir -p client/server

          # Copy JAR files (we already validated they exist)
          cp server/build/libs/*.jar client/server/
          echo "✅ Server JAR copied to client/server/"

          # List what we're packaging
          echo "📦 Packaging contents:"
          echo "Server JAR: $(ls client/server/*.jar)"
          echo "Client files: $(ls client/out/)"

          cd client
          npm install --no-save @vscode/vsce
          npx vsce package --out ../vscode-grails.vsix
          echo "✅ VSIX created with complete Language Server"

      # Always upload for debugging
      - name: 📤 Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vscode-grails-${{ github.run_number }}
          path: |
            vscode-grails.vsix
            server/build/libs/*.jar
            client/out/
            server/build/reports/

  publish:
    needs: build
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: vscode-grails-${{ github.run_number }}

      - name: 🚀 Publish to VS Code Marketplace
        run: |
          if [ -z "${{ secrets.VSCODE_PAT }}" ]; then
            echo "⚠️ VSCODE_PAT secret not configured, skipping publish"
            echo "To enable publishing, add VSCODE_PAT secret to repository settings"
            exit 0
          fi

          # Verify VSIX exists before publishing
          if [ ! -f "vscode-grails.vsix" ]; then
            echo "❌ VSIX file not found! Cannot publish."
            exit 1
          fi

          echo "🚀 Publishing to VS Code Marketplace..."
          npx vsce publish --pat "${{ secrets.VSCODE_PAT }}" --packagePath vscode-grails.vsix
          echo "✅ Published successfully to VS Code Marketplace!"
