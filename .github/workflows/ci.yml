name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Add concurrency control to cancel outdated runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  build:
    runs-on: ubuntu-latest
    # Add timeout to prevent hanging jobs
    timeout-minutes: 30

    # Restrict permissions following principle of least privilege
    permissions:
      contents: read
      checks: write
      pull-requests: write

    strategy:
      matrix:
        java: ["17"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}
          cache: gradle

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.1" # Updated to match undici requirements
          cache: npm

      - name: Make gradlew executable
        working-directory: server
        run: chmod +x gradlew

      # Server build with better error handling
      - name: üî® Build server (skip tests)
        working-directory: server
        run: |
          ./gradlew --no-daemon clean build -x test --stacktrace
          echo "Server build completed"

      # Install dependencies at root level (since you consolidated)
      - name: üì¶ Install dependencies
        run: npm ci

      # Build client with proper TypeScript compilation
      - name: üèóÔ∏è Build client
        run: |
          npm run compile
          npm run bundle
          echo "Client build completed"

      # Run tests if available
      - name: üß™ Run tests
        run: npm test --if-present

      # Enhanced artifact validation
      - name: üîç Validate build artifacts
        run: |
          echo "=== Server Build Validation ==="
          if ! ls server/build/libs/*.jar 1> /dev/null 2>&1; then
            echo "‚ùå CRITICAL: Server JAR not found!"
            echo "Available files in server/build/:"
            find server/build/ -type f -name "*.jar" || echo "No JAR files found"
            exit 1
          fi

          SERVER_JAR=$(ls server/build/libs/*.jar | head -1)
          SERVER_SIZE=$(stat -f%z "$SERVER_JAR" 2>/dev/null || stat -c%s "$SERVER_JAR")
          echo "‚úÖ Server JAR found: $SERVER_JAR (${SERVER_SIZE} bytes)"

          echo "=== Client Build Validation ==="
          if [ ! -f "client/out/extension.js" ]; then
            echo "‚ùå CRITICAL: Client extension.js not found!"
            exit 1
          fi

          CLIENT_SIZE=$(stat -f%z "client/out/extension.js" 2>/dev/null || stat -c%s "client/out/extension.js")
          echo "‚úÖ Client compiled: client/out/extension.js (${CLIENT_SIZE} bytes)"

      # Package with better structure
      - name: üéÅ Package VSIX
        if: success()
        run: |
          # Create server directory structure
          mkdir -p server/

          # Copy server JAR to root server directory (matching your package.json main path)
          cp server/build/libs/*.jar server/
          echo "‚úÖ Server JAR copied to server/"

          # List packaging contents
          echo "üì¶ Packaging contents:"
          echo "Server JAR: $(ls server/*.jar)"
          echo "Client files: $(ls client/out/)"
          echo "Package.json main: $(grep '"main"' package.json)"

          # Package using root directory
          npm run package
          echo "‚úÖ VSIX created successfully"

      # Upload artifacts with better organization
      - name: üì§ Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vscode-grails-${{ github.run_number }}
          path: |
            dist/*.vsix
            server/*.jar
            client/out/
          retention-days: 30

      # Upload test results if they exist
      - name: üìä Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: |
            server/build/reports/
            client/coverage/
          retention-days: 7

  # Security scanning job
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, java

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  publish:
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: read
      id-token: write # For OIDC if needed

    steps:
      - name: üì• Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: vscode-grails-${{ github.run_number }}

      - name: üîç Verify VSIX before publish
        run: |
          VSIX_FILE=$(find . -name "*.vsix" | head -1)
          if [ -z "$VSIX_FILE" ]; then
            echo "‚ùå No VSIX file found!"
            find . -type f -name "*.vsix" || echo "No VSIX files in workspace"
            exit 1
          fi

          VSIX_SIZE=$(stat -f%z "$VSIX_FILE" 2>/dev/null || stat -c%s "$VSIX_FILE")
          echo "‚úÖ VSIX found: $VSIX_FILE (${VSIX_SIZE} bytes)"

          # Basic VSIX validation
          if [ "$VSIX_SIZE" -lt 10000 ]; then
            echo "‚ùå VSIX file suspiciously small (< 10KB)"
            exit 1
          fi

      - name: üöÄ Publish to VS Code Marketplace
        run: |
          if [ -z "${{ secrets.VSCODE_PAT }}" ]; then
            echo "‚ö†Ô∏è VSCODE_PAT secret not configured, skipping publish"
            echo "To enable publishing, add VSCODE_PAT secret to repository settings"
            exit 0
          fi

          VSIX_FILE=$(find . -name "*.vsix" | head -1)
          echo "üöÄ Publishing $VSIX_FILE to VS Code Marketplace..."

          npx @vscode/vsce publish --pat "${{ secrets.VSCODE_PAT }}" --packagePath "$VSIX_FILE"
          echo "‚úÖ Published successfully to VS Code Marketplace!"

      # Optional: Create GitHub release
      - name: üè∑Ô∏è Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          files: "*.vsix"
          generate_release_notes: true
